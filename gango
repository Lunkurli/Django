activate virtual environment in django
source aiti/bin/activate

python3 -m venv my-project-env

install django into the newly created virtual environment anytime a new 
virtual environment is created 
pip3 install Django

django-admin startproject PROJECT_NAME
Run django-admin startproject PROJECT_NAME to create a number of starter files for our project.
Run cd PROJECT_NAME to navigate into your new project’s directory.
Start the project by running python manage.py runserver.

Next, we’ll have to create an application. Django projects are split into one or more applications. 

Most of our projects will only require one application,
but larger sites can make use of this ability to split a site into multiple apps. To create an application, we run 
python manage.py startapp APP_NAME.


Now, we have to install our new app. To do this, we go to settings.py, scroll down to the list of INSTALLED_APPS, 
and add the name of our new application to this list.

####Routes####
Next, we’ll navigate to views.py. This file will contain a number of different views,
and we can think of a view for now as one page the user might like to see. 


To create our first view, we’ll write a function that takes in a request. For now, we’ll simply return an HttpResponse (A very simple response that includes a response code of 200 and a string of text that can be displayed in a web browser) of “Hello, World”. In order to do this, we have include from django.http import HttpResponse. Our file now looks like:


Now, we need to somehow associate this view we have just created with a specific URL. To do this, we’ll create another file called urls.py in the same directory as views.py. We already have a urls.py file for the whole project, but it is best to have a separate one for each individual app.



Inside our new urls.py, we’ll create a list of url patterns that a user might visit while using our website. In order to do this:
We have to make some imports: from django.urls import path will give us the ability to reroute URLSs, and from . import views will import  any functions we’ve created in views.py.
Create a list called urlpatterns


Many sites are parameterized by items included in the URL. 

Next, we have to create a more flexible path in urls.py

I can even make these look a little bit nicer, by augmenting the greet function to utilize Python’s capitalize function 
that capitalizes a string:


###########FORMS####################
Let’s begin by adding another function to views.py that will render a page with a form for adding a new task:
# Add a new task:
def add(request):
    return render(request, "tasks/add.html")
    
Next, make sure to add another path to urls.py:

path("add", views.add, name="add")


template inheritance. This allows us to create a layout.html file that will contain the general structure of our page:


Now, let’s work on making sure the form actually does something when the user submits it. We can do this by adding an action to the form we have created in add.html:

Django requires a token to prevent Cross-Site Request Forgery (CSRF) Attack.

This is an attack where a malicious user attempts to send a request to your server from somewhere other than your site. This could be a really big problem for some websites. Say, for example, that a banking website has a form for one user to transfer money to another one. It would be catastrophic if someone could submit a transfer from outside of the bank’s website!

A quick note: in order to redirect the user after a successful submission, we need a few more imports:

from django.urls import reverse
from django.http import HttpResponseRedirect

#########Sessions#################

Sessions are a way to store unique data on the server side for each new visit to a website.

To use sessions in our application, we’ll first delete our global tasks variable, then alter our index function, and finally make sure that anywhere else we had used the variable tasks, we replace it with request.session["tasks"]





The NoReverseMatch exception is raised by django.core.urlresolvers when a matching URL in your URLconf cannot be identified based on the parameters supplied.














